version: '3.9'

services:
  base: &base
    build:
      context: .
      dockerfile: ./docker/Dockerfile
      args:
        BUNDLE_WITHOUT: ''
        EXECJS_RUNTIME: 'Node'
        RAILS_ENV: 'development'
        RAILS_SERVE_STATIC_FILES: 'false'
    tty: true
    stdin_open: true
    image: hypercable:development
    env_file: .env

#  postgres:
#    image: postgres:12
#    restart: always
#    ports:
#      - '4432:5432'
#    volumes:
#      - postgres:/var/lib/postgresql/data
#    environment:
#      - POSTGRES_DB=hypercable_dev
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=password
#  tsdb:
#    image: timescale/timescaledb:2.1.1-pg13
#    restart: always
#    ports:
#      - '5532:5432'
#    volumes:
#      - tsdb:/var/lib/postgresql/data
#    environment:
#      - POSTGRES_DB=tsdb_dev
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=password
#  redis:
#    image: redis:alpine
#    restart: always
#    command: ["sh", "-c", "redis-server --requirepass \"$REDIS_PASSWORD\""]
#    env_file: .env
#    volumes:
#      - redis:/data/redis
#    ports:
#      - '6380:6379'

  openresty:
    build:
      context: ./docker/dockerfiles
      dockerfile: openresty.Dockerfile
    tty: true
    restart: always
    stdin_open: true
    ports:
      - '8000:8000'
    image: hypercable-openresty:development
    environment:
      - REDIS_HOST=192.168.1.201
      - REDIS_PORT=6379
#    depends_on:
#      - redis

  geoipupdate:
    container_name: geoipupdate
    image: maxmindinc/geoipupdate
    restart: unless-stopped
    env_file: .env
    environment:
      - 'GEOIPUPDATE_EDITION_IDS=GeoLite2-ASN GeoLite2-City GeoLite2-Country'
      - GEOIPUPDATE_FREQUENCY=72
    volumes:
      - 'geoipupdate_data:/usr/local/var/GeoIP/'

  rails:
    <<: *base
    build:
      context: .
      dockerfile: ./docker/dockerfiles/rails.Dockerfile
    image: hypercable-rails:development
    dns:
      - 8.8.8.8
    restart: always
    volumes:
      - ./:/app:delegated
      - node_modules:/app/node_modules
      - packs:/app/public/packs
      - cache:/app/tmp/cache
      - bundle:/usr/local/bundle
    depends_on:
#      - postgres
#      - tsdb
#      - redis
      - webpack
      - sidekiq
    ports:
      - 3333:3000
    env_file: .env
    environment:
      - WEBPACKER_DEV_SERVER_HOST=webpack
      - NODE_ENV=development
      - RAILS_ENV=development
    entrypoint: docker/entrypoints/rails.sh
    command: ["bundle", "exec", "rails", "s", "-p", "3000", "-b", "0.0.0.0"]

  sidekiq:
    <<: *base
    image: hypercable-rails:development
    dns:
      - 8.8.8.8
    restart: always
    volumes:
      - ./:/app:delegated
      - node_modules:/app/node_modules
      - packs:/app/public/packs
      - cache:/app/tmp/cache
      - bundle:/usr/local/bundle
      - 'geoipupdate_data:/usr/local/var/GeoIP/'
#    depends_on:
#      - postgres
#      - tsdb
#      - redis
    environment:
      - NODE_ENV=development
      - RAILS_ENV=development
    entrypoint: docker/entrypoints/rails.sh
    command: ["bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml"]

  webpack:
    <<: *base
    build:
      context: .
      dockerfile: ./docker/dockerfiles/webpack.Dockerfile
    image: hypercable-webpack:development
    volumes:
      - ./:/app:delegated
      - node_modules:/app/node_modules # Node modules shared across containers
      - packs:/app/public/packs
      - cache:/app/tmp/cache
      - bundle:/usr/local/bundle
    ports:
      - "13035:3035" # Webpack dev server
    environment:
      - WEBPACKER_DEV_SERVER_HOST=0.0.0.0
      - NODE_ENV=development
      - RAILS_ENV=development
    entrypoint: docker/entrypoints/webpack.sh
    command: bin/webpack-dev-server

networks:
  default:


volumes:
#  postgres:
#  tsdb:
#  redis:
  packs:
  node_modules:
  cache:
  bundle:
  geoipupdate_data:
    driver: local
